// Mocks generated by Mockito 5.4.2 from annotations
// in deliveristo_flutter_challenge/test/blocs/splash_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:deliveristo_flutter_challenge/src/application/errors/errors.dart'
    as _i4;
import 'package:deliveristo_flutter_challenge/src/commons/models/breed.dart'
    as _i7;
import 'package:deliveristo_flutter_challenge/src/commons/models/dog_response.dart'
    as _i5;
import 'package:deliveristo_flutter_challenge/src/commons/repositories/dog_repository.dart'
    as _i2;
import 'package:fpdart/fpdart.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DogRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDogRepository extends _i1.Mock implements _i2.DogRepository {
  MockDogRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TaskEither<_i4.Failure, _i5.RandomDogResponse> getRandomDog() =>
      (super.noSuchMethod(
        Invocation.method(
          #getRandomDog,
          [],
        ),
        returnValue:
            _i6.dummyValue<_i3.TaskEither<_i4.Failure, _i5.RandomDogResponse>>(
          this,
          Invocation.method(
            #getRandomDog,
            [],
          ),
        ),
      ) as _i3.TaskEither<_i4.Failure, _i5.RandomDogResponse>);

  @override
  _i3.TaskEither<_i4.Failure, _i5.RandomDogResponse> getDogByBreed(
          {required String? breed}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDogByBreed,
          [],
          {#breed: breed},
        ),
        returnValue:
            _i6.dummyValue<_i3.TaskEither<_i4.Failure, _i5.RandomDogResponse>>(
          this,
          Invocation.method(
            #getDogByBreed,
            [],
            {#breed: breed},
          ),
        ),
      ) as _i3.TaskEither<_i4.Failure, _i5.RandomDogResponse>);

  @override
  _i3.TaskEither<_i4.Failure, List<_i7.Breed>> getBreeds() =>
      (super.noSuchMethod(
        Invocation.method(
          #getBreeds,
          [],
        ),
        returnValue:
            _i6.dummyValue<_i3.TaskEither<_i4.Failure, List<_i7.Breed>>>(
          this,
          Invocation.method(
            #getBreeds,
            [],
          ),
        ),
      ) as _i3.TaskEither<_i4.Failure, List<_i7.Breed>>);

  @override
  _i3.TaskEither<_i4.Failure, List<_i5.RandomDogResponse>> getAllDogByBreed(
          {required String? breed}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllDogByBreed,
          [],
          {#breed: breed},
        ),
        returnValue: _i6.dummyValue<
            _i3.TaskEither<_i4.Failure, List<_i5.RandomDogResponse>>>(
          this,
          Invocation.method(
            #getAllDogByBreed,
            [],
            {#breed: breed},
          ),
        ),
      ) as _i3.TaskEither<_i4.Failure, List<_i5.RandomDogResponse>>);

  @override
  _i3.TaskEither<_i4.Failure, _i5.RandomDogResponse> getDogByBreedSubBreed({
    required String? breed,
    required String? subBreed,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDogByBreedSubBreed,
          [],
          {
            #breed: breed,
            #subBreed: subBreed,
          },
        ),
        returnValue:
            _i6.dummyValue<_i3.TaskEither<_i4.Failure, _i5.RandomDogResponse>>(
          this,
          Invocation.method(
            #getDogByBreedSubBreed,
            [],
            {
              #breed: breed,
              #subBreed: subBreed,
            },
          ),
        ),
      ) as _i3.TaskEither<_i4.Failure, _i5.RandomDogResponse>);
}
